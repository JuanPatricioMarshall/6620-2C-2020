6 68 18 73 48 69 59 126 52 95 128 111 73 82 68 104 68 105 100 134 76 81 150 129 82 150 77 118 115 171 110 145 53 74 146 123 104
e et al.
==666== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==666== Command: /tmp/02-mmult
==666== Parent PID: 597
==666== 
--666-- Warning: Cannot auto-detect cache config, using defaults.
--666--          Run with -v to see.
==666== 
==666== I   refs:      147,225,941
==666== I1  misses:          2,409
==666== LLi misses:          2,389
==666== I1  miss rate:        0.00%
==666== LLi miss rate:        0.00%
==666== 
==666== D   refs:       73,565,863  (52,539,344 rd   + 21,026,519 wr)
==666== D1  misses:      1,314,850  (     3,527 rd   +  1,311,323 wr)
==666== LLd misses:      1,314,203  (     2,925 rd   +  1,311,278 wr)
==666== D1  miss rate:         1.8% (       0.0%     +        6.2%  )
==666== LLd miss rate:         1.8% (       0.0%     +        6.2%  )
==666== 
==666== LL refs:         1,317,259  (     5,936 rd   +  1,311,323 wr)
==666== LL misses:       1,316,592  (     5,314 rd   +  1,311,278 wr)
==666== LL miss rate:          0.6% (       0.0%     +        6.2%  )
--------------------------------------------------------------------------------
I1 cache:         32768 B, 32 B, 4-way associative
D1 cache:         32768 B, 32 B, 4-way associative
LL cache:         524288 B, 32 B, 8-way associative
Command:          /tmp/02-mmult
Data file:        cachegrind.out.666
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   /root/CARPETA/tp2-2020-2q-src/main.c
Auto-annotation:  off

--------------------------------------------------------------------------------
Ir          I1mr  ILmr  Dr         D1mr  DLmr  Dw         D1mw      DLmw      
--------------------------------------------------------------------------------
147,225,941 2,409 2,389 52,539,344 3,527 2,925 21,026,519 1,311,323 1,311,278  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir          I1mr ILmr Dr         D1mr  DLmr Dw         D1mw      DLmw       file:function
--------------------------------------------------------------------------------
146,810,542   29   29 52,433,589    31   31 20,972,246 1,310,728 1,310,728  /root/CARPETA/tp2-2020-2q-src/main.c:matrix_multiply

--------------------------------------------------------------------------------
-- User-annotated source: /root/CARPETA/tp2-2020-2q-src/main.c
--------------------------------------------------------------------------------
Ir         I1mr ILmr Dr         D1mr DLmr Dw         D1mw      DLmw      

-- line 18 ----------------------------------------
         .    .    .          .    .    .          .         .         .  matrix_t* create_matrix(size_t rows, size_t cols);
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  void destroy_matrix(matrix_t* m);
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  int print_matrix(FILE* fp, matrix_t* m);
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  int
         .    .    .          .    .    .          .         .         .  main(int argc, char** argv)
        10    2    2          0    0    0          5         0         0  {
         .    .    .          .    .    .          .         .         .  	/* matrixes */
         .    .    .          .    .    .          .         .         .  	matrix_t *a, *b, *c;
         .    .    .          .    .    .          .         .         .  	/* n (dimension) and block size */
         .    .    .          .    .    .          .         .         .  	size_t n, bs;
         .    .    .          .    .    .          .         .         .  	/* line buffer (init to null to simplify freeing on error) */
         1    0    0          0    0    0          1         0         0  	char *line = NULL;
         .    .    .          .    .    .          .         .         .  	/* line parsing auxiliar pointers */
         .    .    .          .    .    .          .         .         .  	char *nptr, *endptr;
         .    .    .          .    .    .          .         .         .  	/* auxiliar variables */
         .    .    .          .    .    .          .         .         .  	long l;
         .    .    .          .    .    .          .         .         .  	double e;
         2    1    1          0    0    0          1         0         0  	size_t lineno = 1;
         .    .    .          .    .    .          .         .         .  	struct timespec t0;
         .    .    .          .    .    .          .         .         .  	struct timespec t1;
         .    .    .          .    .    .          .         .         .  	double dt;
         .    .    .          .    .    .          .         .         .  	size_t i;
         .    .    .          .    .    .          .         .         .  
        25    4    4          9    0    0          1         0         0  	for(; !feof(stdin); lineno++) {
        10    1    1          4    0    0          6         0         0  		a=b=c=NULL;
         .    .    .          .    .    .          .         .         .  
        18    3    3          8    1    0          2         0         0  		line = read_line(stdin);
         .    .    .          .    .    .          .         .         .  
         6    0    0          2    0    0          0         0         0  		if (!line) goto _exit_main;
         9    0    0          4    0    0          0         0         0  		if (line[0] == 0) break;
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  		/* parse dimension */
         2    1    1          1    0    0          1         1         0  		nptr = line;
        10    1    1          3    1    0          1         0         0  		l = strtol(nptr, &endptr, 10);
         8    1    1          3    0    0          0         0         0  		if (errno) {
         .    .    .          .    .    .          .         .         .  			perror("");
         .    .    .          .    .    .          .         .         .  			goto _exit_main;
         .    .    .          .    .    .          .         .         .  		}
         4    2    2          2    0    0          0         0         0  		if (nptr == endptr) {
         .    .    .          .    .    .          .         .         .  			fprintf(stderr, "missing dimension");
         .    .    .          .    .    .          .         .         .  			goto _exit_main;
         .    .    .          .    .    .          .         .         .  		}
         3    2    2          1    0    0          0         0         0  		if (l < 1) {
         .    .    .          .    .    .          .         .         .  			fprintf(stderr, "invalid dimension");
         .    .    .          .    .    .          .         .         .  			goto _exit_main;
         .    .    .          .    .    .          .         .         .  		}
         2    1    1          1    0    0          1         0         0  		n = (size_t) l;
         .    .    .          .    .    .          .         .         .  #if 0
         .    .    .          .    .    .          .         .         .  		/* parse block size */
         .    .    .          .    .    .          .         .         .  		nptr = endptr;
         .    .    .          .    .    .          .         .         .  		l = strtol(nptr, &endptr, 10);
         .    .    .          .    .    .          .         .         .  		if (errno) {
         .    .    .          .    .    .          .         .         .  			perror("");
         .    .    .          .    .    .          .         .         .  			goto _exit_main;
         .    .    .          .    .    .          .         .         .  		}
-- line 75 ----------------------------------------
-- line 83 ----------------------------------------
         .    .    .          .    .    .          .         .         .  		}
         .    .    .          .    .    .          .         .         .  		bs = (size_t) l;
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  		if (n % bs) {
         .    .    .          .    .    .          .         .         .  			fprintf(stderr, "block size doesn't match");
         .    .    .          .    .    .          .         .         .  			goto _exit_main;
         .    .    .          .    .    .          .         .         .  		}
         .    .    .          .    .    .          .         .         .  #else
         2    0    0          1    0    0          1         0         0  		bs = n;
         .    .    .          .    .    .          .         .         .  #endif
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  		/* load matrix a */
        11    1    1          5    1    0          1         0         0  		if (!(a = create_matrix(n, n)))
         .    .    .          .    .    .          .         .         .  			goto _exit_main;
         .    .    .          .    .    .          .         .         .  		
       370    3    3        147    0    0         37         0         0  		for (i=0; i < n*n; i++) {
        72    0    0         36    0    0         36         0         0  			nptr = endptr;
       324    1    1        108    0    0         36         0         0  			e = strtod(nptr, &endptr);
       288    1    1        108    0    0          0         0         0  			if (errno) {
         .    .    .          .    .    .          .         .         .  				perror("");
         .    .    .          .    .    .          .         .         .  				goto _exit_main;
         .    .    .          .    .    .          .         .         .  			}
       144    2    2         72    0    0          0         0         0  			if (nptr == endptr) {
         .    .    .          .    .    .          .         .         .  				fprintf(stderr, "missing A matrix element");
         .    .    .          .    .    .          .         .         .  				goto _exit_main;
         .    .    .          .    .    .          .         .         .  			}
       252    1    1        144    0    0         36         8         8  			a->array[i] = e;
         .    .    .          .    .    .          .         .         .  		}
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  		/* load matrix b */
        11    1    1          5    0    0          1         0         0  		if (!(b = create_matrix(n, n)))
         .    .    .          .    .    .          .         .         .  			goto _exit_main;
         .    .    .          .    .    .          .         .         .  		
       370    2    2        147    0    0         37         0         0  		for (i=0; i < n*n; i++) {
        72    1    1         36    0    0         36         0         0  			nptr = endptr;
       324    1    1        108    0    0         36         0         0  			e = strtod(nptr, &endptr);
       288    1    1        108    0    0          0         0         0  			if (errno) {
         .    .    .          .    .    .          .         .         .  				perror("");
         .    .    .          .    .    .          .         .         .  				goto _exit_main;
         .    .    .          .    .    .          .         .         .  			}
       144    1    1         72    0    0          0         0         0  			if (nptr == endptr) {
         .    .    .          .    .    .          .         .         .  				fprintf(stderr, "missing B matrix element");
         .    .    .          .    .    .          .         .         .  				goto _exit_main;
         .    .    .          .    .    .          .         .         .  			}
       252    1    1        144    0    0         36         9         9  			b->array[i] = e;
         .    .    .          .    .    .          .         .         .  		}
         .    .    .          .    .    .          .         .         .  
         8    1    1          2    0    0          0         0         0  		clock_gettime(CLOCK_REALTIME, &t0);
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  		/* multiply matrixes */
        13    2    2          6    1    1          1         0         0  		if (!(c = matrix_multiply(a, b, bs)))
         .    .    .          .    .    .          .         .         .  			goto _exit_main;
         .    .    .          .    .    .          .         .         .  
         8    1    1          2    0    0          0         0         0  		clock_gettime(CLOCK_REALTIME, &t1);
         .    .    .          .    .    .          .         .         .  			
         7    1    1          2    1    1          1         1         1  		dt = (float) (t1.tv_sec - t0.tv_sec);
        12    1    1          5    2    2          1         0         0  		dt = dt + ((float)(t1.tv_nsec - t0.tv_nsec)) / 1.0e9;
         .    .    .          .    .    .          .         .         .  
        13    3    2          5    2    2          0         0         0  		if(print_matrix(stdout, c) == -1)
         .    .    .          .    .    .          .         .         .  			goto _exit_main;
         .    .    .          .    .    .          .         .         .  
        12    2    1          7    0    0          0         0         0  		fprintf(stderr, "time: %g\n", dt);
         .    .    .          .    .    .          .         .         .  
         6    1    1          3    0    0          0         0         0  		free(line);
         6    1    1          3    0    0          0         0         0  		destroy_matrix(a);
         6    1    1          3    0    0          0         0         0  		destroy_matrix(b);
         6    0    0          3    0    0          0         0         0  		destroy_matrix(c);
         .    .    .          .    .    .          .         .         .  	}
         .    .    .          .    .    .          .         .         .  
         3    1    1          0    0    0          0         0         0  	return 0;
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  _exit_main:
         .    .    .          .    .    .          .         .         .  	fprintf(stderr, " at line %u\n", (unsigned) lineno);
         .    .    .          .    .    .          .         .         .  	free(line);
         .    .    .          .    .    .          .         .         .  	destroy_matrix(a);
         .    .    .          .    .    .          .         .         .  	destroy_matrix(b);
         .    .    .          .    .    .          .         .         .  	destroy_matrix(c);
         .    .    .          .    .    .          .         .         .  	exit(1);
         6    1    1          2    0    0          0         0         0  }
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  matrix_t*
         .    .    .          .    .    .          .         .         .  matrix_multiply(matrix_t* m1, matrix_t* m2, int bs)
        11    2    2          0    0    0          6         0         0  {
         .    .    .          .    .    .          .         .         .  	size_t n, en, i, j, k, kk, jj;
         .    .    .          .    .    .          .         .         .  	double sum;
         .    .    .          .    .    .          .         .         .  	matrix_t* mr;
         .    .    .          .    .    .          .         .         .  
         3    1    1          2    0    0          1         0         0  	n = m1->rows;
         .    .    .          .    .    .          .         .         .  
        11    1    1          5    0    0          1         0         0  	if(!(mr = create_matrix(n,n))) return NULL;
         .    .    .          .    .    .          .         .         .  
         9    2    2          3    0    0          1         0         0  	en = bs*(n/bs);
         .    .    .          .    .    .          .         .         .  
        56    2    2         20    0    0          7         0         0  	for(i=0; i<n; i++)
       336    1    1        120    0    0         42         0         0  		for(j=0; j<n; j++) 
       396    1    1        180    0    0         72         8         8  			mr->array[i*n+j] = 0.0;
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  #if 1
         .    .    .          .    .    .          .         .         .  	if (1) {
         .    .    .          .    .    .          .         .         .  		size_t j;
         2    0    0          0    0    0          1         0         0  		size_t dim = 1024*1024*10;
         9    1    1          3    0    0          1         0         0  		int *v = malloc(dim*sizeof(int));
83,886,088    2    2 31,457,282    0    0 10,485,761         0         0  		for (j = 0; j < dim; ++j)
62,914,560    0    0 20,971,520    0    0 10,485,760 1,310,720 1,310,720  			v[j] = -1;
         6    1    1          3    2    2          0         0         0  		free(v);
         .    .    .          .    .    .          .         .         .  	}
         .    .    .          .    .    .          .         .         .  #endif
         .    .    .          .    .    .          .         .         .  
        17    2    2          6    0    0          2         0         0  	for(kk=0; kk<en; kk+=bs) 
        17    2    2          6    0    0          2         0         0  		for(jj=0; jj<en; jj+=bs) 
        56    1    1         20    0    0          7         0         0  			for(i=0; i<n; i++) 
       426    2    2        168    0    0         42         0         0  				for(j=jj; j<jj+bs; j++) {
       396    1    1        216   10   10         36         0         0  					sum = mr->array[i*n+j];
     2,556    3    3      1,008    0    0        252         0         0  					for(k=kk; k<kk+bs; k++) 
     5,184    2    2      2,808   19   19        216         0         0  						sum += m1->array[i*n+k] * m2->array[k*n+j];  
       396    1    1        216    0    0         36         0         0  					mr->array[i*n+j] = sum;
         .    .    .          .    .    .          .         .         .  				}
         1    0    0          1    0    0          0         0         0  	return mr;
         6    1    1          2    0    0          0         0         0  }
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  char*
         .    .    .          .    .    .          .         .         .  read_line(FILE *fp)
        18    3    3          0    0    0          8         0         0  {
         .    .    .          .    .    .          .         .         .  #define DEF_LINE_SZ 1024
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  	int c;
         6    0    0          0    0    0          4         0         0  	size_t len = 0, tam = DEF_LINE_SZ;
         .    .    .          .    .    .          .         .         .  	char* str;
         .    .    .          .    .    .          .         .         .  
        14    1    1          6    1    0          2         1         0  	str = malloc(tam);
         6    0    0          2    0    0          0         0         0  	if (!str) {
         .    .    .          .    .    .          .         .         .  	    	perror("");
         .    .    .          .    .    .          .         .         .  		return NULL;
         .    .    .          .    .    .          .         .         .  	}
         .    .    .          .    .    .          .         .         .  
     2,201    5    5        734    1    0        147         0         0  	while (EOF != (c=fgetc(fp)) && c != '\n') {
     1,160    2    2        435    0    0        290         4         4  		str[len++]=c;
       725    0    0        290    0    0          0         0         0  		if (len==tam-1) {
         .    .    .          .    .    .          .         .         .  			str = realloc(str, tam *= 2);
         .    .    .          .    .    .          .         .         .  			if (!str) {
         .    .    .          .    .    .          .         .         .  				perror("");
         .    .    .          .    .    .          .         .         .  				return NULL;
         .    .    .          .    .    .          .         .         .  			}
         .    .    .          .    .    .          .         .         .  		}
         .    .    .          .    .    .          .         .         .  	}
         .    .    .          .    .    .          .         .         .  
         8    1    1          2    0    0          0         0         0  	if (c != EOF)
         7    0    0          2    0    0          2         0         0  		str[len++]='\n';
         .    .    .          .    .    .          .         .         .  
        12    1    1          4    0    0          4         0         0  	str[len++]='\0';
         2    0    0          2    0    0          0         0         0  	return str;
        12    1    1          4    0    0          0         0         0  }
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  matrix_t*
         .    .    .          .    .    .          .         .         .  create_matrix(size_t rows, size_t cols)
        30    1    1          0    0    0         15         0         0  {
         .    .    .          .    .    .          .         .         .  	matrix_t * m;
         .    .    .          .    .    .          .         .         .  
        30    2    2          9    1    0          3         0         0  	if (!(m = malloc(sizeof(matrix_t)))) {
         .    .    .          .    .    .          .         .         .  		perror("");
         .    .    .          .    .    .          .         .         .  		return NULL;
         .    .    .          .    .    .          .         .         .  	}
         .    .    .          .    .    .          .         .         .  
         9    1    1          6    0    0          3         0         0  	m->rows = rows;
         9    1    1          6    0    0          3         0         0  	m->cols = cols;
        51    2    2         21    0    0          3         0         0  	if (!(m->array = malloc(sizeof(double)*rows*cols))) {
         .    .    .          .    .    .          .         .         .  		free(m);
         .    .    .          .    .    .          .         .         .  		perror("");
         .    .    .          .    .    .          .         .         .  		return NULL;
         .    .    .          .    .    .          .         .         .  	}
         .    .    .          .    .    .          .         .         .  	
         3    1    1          3    0    0          0         0         0  	return m;
        18    1    1          6    0    0          0         0         0  }
         .    .    .          .    .    .          .         .         .  
         .    .    .          .    .    .          .         .         .  void
         .    .    .          .    .    .          .         .         .  destroy_matrix(matrix_t* m)
        27    1    1          0    0    0         12         0         0  {
         9    0    0          3    0    0          0         0         0  	if (!m) return;
        24    1    1         12    0    0          0         0         0  	free(m->array);
        24    1    1          9    0    0          0         0         0  	free(m);
        18    0    0          6    0    0          0         0         0  }
         .    .    .          .    .    .          .         .         .  		
         .    .    .          .    .    .          .         .         .  int
         .    .    .          .    .    .          .         .         .  print_matrix(FILE* fp, matrix_t* m)
        10    2    2          0    0    0          5         0         0  {
         .    .    .          .    .    .          .         .         .  	size_t i, j;
         .    .    .          .    .    .          .         .         .  	size_t n;
         3    1    1          2    0    0          1         0         0  	n = m->rows;
        13    1    1          6    1    1          0         0         0  	if (fprintf(fp, "%lu", (unsigned long) m->rows) < 0) {
         .    .    .          .    .    .          .         .         .  		perror("");
         .    .    .          .    .    .          .         .         .  		return -1;
         .    .    .          .    .    .          .         .         .  	}
        56    2    2         20    0    0          7         0         0  	for(i=0; i<n; i++)
       336    2    2        120    0    0         42         0         0  		for (j=0; j<n; j++) 
       792    3    3        360    0    0          0         0         0  			if (fprintf(fp, " %g", m->array[i*n+j]) < 0) {
         .    .    .          .    .    .          .         .         .  				perror("");
         .    .    .          .    .    .          .         .         .  				return -1;
         .    .    .          .    .    .          .         .         .  			}
        10    1    1          4    0    0          0         0         0  	if (fprintf(fp, "\n") < 0) {
         .    .    .          .    .    .          .         .         .  		perror("");
         .    .    .          .    .    .          .         .         .  		return -1;
         .    .    .          .    .    .          .         .         .  	}
         1    1    1          0    0    0          0         0         0  	return 0;
         6    1    1          2    0    0          0         0         0  }

--------------------------------------------------------------------------------
Ir          I1mr ILmr Dr         D1mr DLmr Dw         D1mw      DLmw      
--------------------------------------------------------------------------------
146,819,332  121  119 52,436,987   44   38 20,973,112 1,310,752 1,310,750  events annotated

